AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-rss-discord-bot

  SAM Template for aws-rss-discord-bot

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 45
    MemorySize: 128

Resources:
  ExecuteCommandFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: execute_command/
      Handler: run_command.lambda_handler
      Runtime: python3.10
      Timeout: 420
      MemorySize: 250
      Environment:
        Variables:
          BIG_DATA_URL: https://aws.amazon.com/blogs/big-data/feed/
          ARCHITECTURE_URL: https://aws.amazon.com/blogs/architecture/feed/
          DEVELOPER_URL: https://aws.amazon.com/blogs/developer/feed/
          NEWS_URL: https://aws.amazon.com/blogs/aws/feed/
          COMPUTE_URL: https://aws.amazon.com/blogs/compute/feed/
          STARTUP_URL: https://aws.amazon.com/blogs/startups/feed/
          TRAIN_CERT_URL: https://aws.amazon.com/blogs/training-and-certification/feed/
          LAST_UPDATED_S3_BUCKET: aws-rss-data-bucket # Update here: S3 bucket where last published date text files will be stored for each blog feed.
          BOT_TOKEN: xxxxxxxxxx # Update here: Bot token for the Discord bot. HIGHLY RECOMMENED to store it and use it from AWS Secrets Manager for public and production use.
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource: arn:aws:s3:::aws-rss-data-bucket/* # Update here: Read and write access to the bucket for reading and writing the last fetched/published date.
      Architectures:
        - x86_64
  VerifyRequestFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: verify_request/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          DISCORD_CLIENT_KEY: xxxxxxxxxx # Update here: # For Production use: HIGHLY RECOMMENDED to store this into Secrets Manager and read in lambda from there.
          COMMAND_LAMBDA_ARN: !GetAtt ExecuteCommandFunction.Arn
      Policies:
        - Statement: 
            Effect: Allow
            Action: lambda:InvokeFunction
            Resource: !GetAtt ExecuteCommandFunction.Arn
      Architectures:
        - x86_64
      Events:
        BotCalls:
          Type: Api
          Properties:
            Path: /
            Method: post

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  VerifyRequestApi:
    Description: "API Gateway endpoint URL for Prod stage for Verify Request function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  VerifyRequestFunction:
    Description: "Verify Request Lambda Function ARN"
    Value: !GetAtt VerifyRequestFunction.Arn
  VerifyRequestIamRole:
    Description: "Implicit IAM Role created for Verify Request function"
    Value: !GetAtt VerifyRequestFunctionRole.Arn
  ExecuteCommandFunction:
    Description: "Execute Command Lambda Function ARN"
    Value: !GetAtt ExecuteCommandFunction.Arn
  ExecuteCommandFunctionIamRole:
    Description: "Implicit IAM Role created for Execute Command Lambda function"
    Value: !GetAtt ExecuteCommandFunctionRole.Arn
